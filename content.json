{"pages":[],"posts":[{"title":"发布npm包（将脚手架工具上传到npm）","text":"1. 发布包 先去官网注册一个账号(如果有账号，直接执行npm login) 执行如下命令 12345678910111213141516npm config set registry https://registry.npmjs.org // 切换镜像npm adduser // 添加或验证用户username // 输入用户名 password // 输入密码（不要怀疑，在这里不管你有没有输入，光标都是不会动的，输入密码后按回车就可）email // 输入邮箱code // 邮箱会接收一个一次性密码，输入即可npm login // 登录npm adduser // 忘记要不要输入这个了 看着来usernamepasswordemailcodenpm publish // 发布，如果有问题，就换个名称，在package.json中修改namenpm config set registry http://registry.npm.taobao.org/ // 最后记得切换回来 最后记得保存好自己的npm包 2. 更新包12npm version &lt;update_type&gt; // 类型有：major minor patch npm publish","link":"/2023/02/11/first-npm-package/"},{"title":"Nuxt3搭建官网","text":"1. Nuxt3的安装前提，确保有Nuxt3的安装环境 123Node.js（必要）Visual Studio Code（推荐）Volar（推荐） node.js 版本之间有差异，安装Nuxt3目前官方推荐 v14 和 v16，或更高的版本。 1.1. 安装新建 Nuxt3 项目首先在你的Nuxt3工作空间下新建一个Nuxt3项目,打开终端输入下方命令 npx 安装npx 是 npm5.2 之后发布的一个命令，可以代替 npm 命令安装依赖或包。 1npx nuxi init nuxt-app # nuxt-app 是项目名 1.2. Nuxt3 运行端口1234# 进入nuxt-app项目，安装依赖cd nuxt-app# npmnpm install 123# 启动项目# npmnpm run dev 访问：http://localhost:3000/ 目前为止，我们就可以开始开发Nuxt3项目啦。 2. arco-design的安装配置2.1. 完整引入vue &gt;= 3.2.0 注意：由于 Vue3 不再支持 IE 浏览器环境，ArcoVue 也不再支持 IE 浏览器环境。 安装1234# npmnpm install --save-dev @arco-design/web-vue# yarnyarn add --dev @arco-design/web-vue 因为 arco-design 属于第三方插件，需要在 plugins 目录配置 根目录下新建 plugins 目录， 在目录下新建 arco-design.ts 文件（注意：默认必须在 plugins 下新建配置文件，这是“约定”，详情见官网） 在 plugins/arco-design.ts 中配置全局 123456import { defineNuxtPlugin } from '#app'import ArcoVue from '@arco-design/web-vue';export default defineNuxtPlugin(nuxtApp =&gt; { nuxtApp.vueApp.use(ArcoVue)}) 在 nuxt.config.ts 中全局配置样式 css 的位置 1234567// https://v3.nuxtjs.org/api/configuration/nuxt.configexport default defineNuxtConfig({ css: [ '@arco-design/web-vue/dist/arco.css' ]}) 2.2. 按需加载（模板）如果使用模板方式进行开发，可以使用 unplugin-vue-components 和 unplugin-auto-import 这两款插件来开启按需加载及自动导入的支持。插件会自动解析模板中的使用到的组件，并导入组件和对应的样式文件。需要组件库 version &gt;= 2.11.0。 123# npmnpm install --save-dev unplugin-auto-importnpm install --save-dev unplugin-vue-components 在 nuxt.config.ts 中配置 12345678910111213141516171819202122232425262728293031// https://v3.nuxtjs.org/api/configuration/nuxt.configimport AutoImport from 'unplugin-auto-import/vite'import Components from 'unplugin-vue-components/vite';import { ArcoResolver } from 'unplugin-vue-components/resolvers';export default defineNuxtConfig({ app: { head: { title: 'Nuxt3-ArcoDesign', meta: [ { name: 'keywords', content: 'Nuxt3,arco-design' }, { name: 'description', content: '使用 Vue 3 构建您的下一个应用，体验混合渲染、强大的数据获取和新功能。 Nuxt 3 是一个开源框架，使 Web 开发变得简单而强大。' }, ], }, }, vite: { plugins: [ AutoImport({ resolvers: [ArcoResolver()], }), Components({ resolvers: [ ArcoResolver({ sideEffect: true }) ] }) ], },}) 2.3. 演示使用打开 app.vue ，初始内容如下，&lt;NuxtWelcome /&gt; 是官方的欢迎页面 12345&lt;template&gt; &lt;div&gt; &lt;NuxtWelcome /&gt; &lt;/div&gt;&lt;/template&gt; 替换成使用 arco-design 的代码查看是否安装配置成功 1234567891011&lt;template&gt; &lt;div&gt; &lt;a-space&gt; &lt;a-button type=&quot;primary&quot;&gt;Primary&lt;/a-button&gt; &lt;a-button&gt;Secondary&lt;/a-button&gt; &lt;a-button type=&quot;dashed&quot;&gt;Dashed&lt;/a-button&gt; &lt;a-button type=&quot;outline&quot;&gt;Outline&lt;/a-button&gt; &lt;a-button type=&quot;text&quot;&gt;Text&lt;/a-button&gt; &lt;/a-space&gt; &lt;/div&gt;&lt;/template&gt; npm run dev 启动项目，访问 http://localhost:3000/ 3.1.更详细的配置可访问 https://github.com/AnderPeng/Nuxt3-ArcoDesign 查看 useFetch的请求封装 api的使用 layouts布局 composables的使用","link":"/2022/11/11/next3-arcoDesign/"},{"title":"peng-cli（脚手架工具）","text":"npm包地址: https://www.npmjs.com/package/peng-cli 1. 基本架构12345678910- lib - config - constants // 常量 - repoMap // 仓库地址的映射 - core - commands // 命令遍历 - create // create命令执行逻辑 - help // --help命令执行逻辑- index // 入口- package.json 所需依赖 commander：命令行操作 download-git-repo：用于下载仓库 inquirer@8：交互 ora@4：可视加载 1npm i commander download-git-repo inquirer@8 ora@4 注意下载的版本，因为inquirer@8和ora@4才支持CommanJs 2. 基本配置 npm init -y初始化 进入package.json需要进行一些配置： 123456{ &quot;main&quot;: &quot;./index.js&quot;, // 入口文件 &quot;bin&quot;: { &quot;peng-cli&quot;: &quot;./index.js&quot; // 通过执行`peng-cli`可执行对应的文件 },} 进入index.js文件，声明执行环境 12#!/usr/bin/env node console.log('peng-cli') 全局链接命令 1npm link 尝试执行，此时终端会打印出okk 1peng-cli 3. 命令与文件说明version与help lib/config/constants.js 123456789101112131415161718192021// 01 获取版本信息const { version } = require('../../package.json') // 02 配置所有需要的命令。写法是commander规定的，具体可在官网查看const actions = { create: { // create 命令，会通过`peng-cli create`执行 alias: &quot;c&quot;, // 别名 description: &quot;create a project&quot;, //描述 examples: [&quot;peng-cli create &lt;project-name&gt;&quot;], }, &quot;*&quot;: { // 其他没有被匹配的命令 alias: &quot;&quot;, description: &quot;command not found&quot;, examples: [], }, }module.exports={ version, actions} lib/core/help.js 123456789101112131415const program = require('commander')const { actions } = require('../config/constants') // 导入所有注册的命令const helpOptions = () =&gt; { program.on(&quot;--help&quot;, () =&gt; { console.log(&quot;\\nExamples:&quot;) // 依次遍历打印所有命令的例子 Reflect.ownKeys(actions).forEach((action) =&gt; { actions[action].examples.forEach((example) =&gt; { console.log(example) }) }) })}module.exports = helpOptions index.js 12345678910#!/usr/bin/env node const program = require('commander')const helpOptions = require('./lib/core/help')const { version } = require(&quot;./lib/config/constants&quot;)program.version(version,'-v,--version') //设置版本命令helpOptions() // 设置help命令program.parse(process.argv); // 最后需要执行下这条才会生效（！） 尝试一下： 12peng-cli -vpeng-cli --help 4. 注册所有命令在上面已经写过actions常量了，现在根据常量注册一下所有命令。 lib/core/commands.js 123456789101112131415161718192021222324252627282930313233const {actions} = require('../config/constants')const program = require('commander')const path = require('path')const commands = () =&gt; { Reflect.ownKeys(actions).forEach((action) =&gt; { program .command(action) // 配置命令名称 .alias(actions[action].alias) // 配置命令别名 .description(actions[action].description) // 配置命令描述 .action(() =&gt; { if (action === &quot;*&quot;) { console.log(actions[action].description) // 匹配不到时 } else { // 匹配到命令时，获取对应的文件（该文件返回一个函数），并执行该函数 // 假设action为create，那么下面的操作就是去导入create.js的函数，并执行它 // 简单说明一下process.argv的结构： // [node可执行文件的绝对路径,当前执行文件的路径,其他参数] // 现在具体到 peng-cli create myproject， // （由于前面在package.json进行了配置，其实node就可忽略，peng-cli代表的就是index.js) // 翻译一下，实际执行的是：node index.js create myproject // 所以process.argv的结构是： // [node， index.js， create， myproject] // 现在通过.slice(3)剔除掉前面三个后就是[myproject] // 最后再解构一下，传入的就是 myproject，也就是写入的项目名称 require(path.resolve(__dirname, action))(...process.argv.slice(3)) } }) })}module.exports = commands 现在回到入口文件注册一下： index.js 12345678#!/usr/bin/env node //...const commands = require('./lib/core/commands')commands()//...program.parse(process.argv); create 现在就是写create命令的逻辑了。 下载仓库当然要下载地址，关于下载地址的写法可参考download-git-repo官网，我这边采用direct方式。 由于我提供了交互，我将根据交互结果为用户提供指定的模板。 点进某个仓库之后，我需要的地址如图所示： 知道自己的地址结构后，就可以安心地写映射了： lib/config/repoMap.js 12345678910111213141516171819202122232425const getReportUrl = (name) =&gt; { if (name === 'vue-ts-nuxt3') { return `github:AnderPeng/Nuxt3-ArcoDesign#main` }}// 由于是根据用户的交互结果来下载某个模板的// 前面的key就是用户交互的结果，我要根据答案给用户提供模板// 我这边设置的是：// - 选择框架： 1|Vue 2|React// - 选择语言： 1|JavaScript 2|TypeScript// - 选择模板： 1|Nuxt3 2|admin// 这个比较灵活，根据自身需求写就行const repoMap = { '111': getReportUrl('vue-js-nuxt3'), '112': getReportUrl('vue-js-admin'), '121': getReportUrl('vue-ts-nuxt3'), '122': getReportUrl('vue-ts-admin'), '211': getReportUrl('react-js-nuxt3'), '212': getReportUrl('react-js-admin'), '221': getReportUrl('react-ts-nuxt3'), '222': getReportUrl('react-ts-admin')}module.exports = repoMap lib/core/create.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980const { promisify } = require(&quot;util&quot;) // 转为异步const download = promisify(require(&quot;download-git-repo&quot;))const ora = require('ora') // 可视加载const inquirer = require(&quot;inquirer&quot;) // 交互const repoMap = require(&quot;../config/repoMap&quot;) // 仓库地址映射// 询问1：选择框架const useFrame = () =&gt; { return inquirer.prompt([ { type: &quot;list&quot;, name: &quot;frame&quot;, // 交互结果会放在这个字段中 message: &quot;chose frame：&quot;, default: 0, choices: [ { value: 1, name: &quot;Vue&quot; }, { value: 2, name: &quot;React&quot; }, ], } ])}// 询问2：选择语言const useLang = () =&gt; { return inquirer.prompt([ { type: &quot;list&quot;, name: &quot;lang&quot;, message: &quot;chose lang：&quot;, default: 0, choices: [ { value: 1, name: &quot;JavaScript&quot; }, { value: 2, name: &quot;TypeScript&quot; }, ], } ])}// 询问3：选择模板const useTemplate = () =&gt; { return inquirer.prompt([ { type: &quot;list&quot;, name: &quot;template&quot;, message: &quot;chose template&quot;, default: 0, choices: [ { value: 1, name: &quot;Nuxt3&quot; }, { value: 2, name: &quot;admin&quot; }, ], } ])}const getResult = async () =&gt; { // 当使用框架时，让用户选择 const frame = await useFrame() const lang = await useLang() const template = await useTemplate() return `${frame.frame}${lang.lang}${template.template}`}const createProjectAction = async (projectName) =&gt; { const result = await getResult() const spinner = ora('Fetch...').start(); // 开始可视加载 console.log('下载地址', repoMap[result]); // 传入仓库地址，项目名称，配置 await download(repoMap[result], projectName).then(() =&gt; { spinner.succeed(&quot;success!&quot;) // 结束可视加载 console.log(`- cd ${projectName}`) console.log(&quot;- npm install -- to install dependencies&quot;) console.log(&quot;- npm start -- to run the project&quot;) console.log(&quot;- npm run build -- to build the project&quot;) }).catch((error) =&gt; { console.log('error', error); spinner.fail(&quot;error!&quot;, error) // 结束可视加载 })}module.exports = createProjectAction 尝试一下~ 1peng-cli create demo","link":"/2023/02/11/peng-cli/"},{"title":"PC端微信扫码登录(二维码内嵌)","text":"利用iframe通信完成PC微信扫码登录 1.先在index.html中引入js文件 2.在需要的页面进行实例化 2.1 封装登录弹窗组件(login.vue)—根据业务需求，不封装直接在页面使用也可以 键值说明：Id: 是存放二维码的容器，appid: 是开发者在微信开房平台提交申请后，获得appid和一个秘钥scope: snsapi_login这个是代表网页版redirect_uri: 这个是扫码后要跳转的页面，这个是要跳转到code页面，这个路径要urlEncode转码的，转码地址为（http://tool.phpshuo.com/UrlEncode.html）, 注意，要跳转的地址必须在申请的域名下面。style: 代表二维码的样式，有black和white可选，href: 修改二维码的样式，要经过base64位转码，地址为（https://the-x.cn/base64/）也可以是链接地址。 2.2 回调地址的code.vue页面 2.3 在需要登录的页面使用login组件&amp;注册事件接收iframe发送的数据 监听事件：如果code&amp;state有值，那么代表用户扫码成功，接下来就可以做逻辑处理了","link":"/2023/02/05/wx-login/"},{"title":"Docker&Jenkins 自动化部署项目流程","text":"1. 安装Docker（本文采用宝塔面板安装的，不做过多阐述）2. 下载Jenkins镜像1docker pull jenkins/jenkins:lts //lts表示支持版本较长 3. 创立jenkins挂载目录并赋权限12mkdir -p /www/jenkins_homechown -R 1000 /www/jenkins_home/ 4. 创立并启动Jenkins容器1234567docker run -di --name=jenkins -p 8080:8080 -v /www/jenkins_home:/var/jenkins_home jenkins/jenkins:lts-d 标识是让 docker 容器在后盾运行-p 10240:8080 将镜像的8080端口映射到服务器的10240端口-p 10241:50000 将镜像的50000端口映射到服务器的10241端口-v /www/jenkins_home:/var/jenkins_home目录为容器jenkins工作目录，咱们将硬盘上的一个目录挂载到这个地位，不便后续更新镜像后持续应用原来的工作目录。这里咱们设置的就是下面咱们创立的 /var/jenkins_home目录--name定义一个容器的名字，如果没有指定，那么会主动生成一个随机数字符串当做UUID 5. 搭建成功 到这里后有个密码是要输入的，通过以下命令获取 1docker logs jenkins 接着到新手入门界面 选择安装推荐的插件 创建第一个管理员用户，自己创建用户名和密码即可 实例配置的URL可以不用改，默认即可 保存并完成 点击重启按钮 6. 配置插件进入Jenkins，在系统管理中安装插件，安装插件 NodeJS 、Publish Over SSH 7. 添加凭据 8. 全局工具配置 然后点击应用、保存按钮 9. 系统配置ssh 然后点击应用、保存按钮 10. 新建任务（项目自动部署） 123456789101112131415echo &quot;开始构建&quot;node -vnpm -vnpm install -g cnpm --registry=https://registry.npm.taobao.orgcnpm installnpm run build#进入到打包目录cd dist#删除上次打包生成的压缩文件rm -rf *.tar.gz#把生成的项目打包成压缩包方便传输到远程服务器tar -zcvf `date +%Y-%m-%d-%H-%M-%S`.tar.gz *#回到上层工作目录cd ../echo &quot;构建结束&quot; 然后点击应用、保存按钮 –&gt;此刻基本就搭建完成了，接下来去构建项目 大功告成~~~","link":"/2023/02/24/jenkinks/"},{"title":"Vue2和Vue3的区别","text":"1、 Vue2.0 和 Vue3.0 有什么区别？ 响应式系统的重新配置，使用代理替换对象.define属性，使用代理优势： 可直接监控阵列类型的数据变化 监听的目标是对象本身，不需要像Object.defineProperty那样遍历每个属性，有一定的性能提升 可拦截应用、拥有密钥、有等13种方法，以及Object.define属性没有办法 直接添加对象属性/删除 新增组合API，更好的逻辑重用和代码组织 重构虚拟 DOM 模板编译时间优化，将一些静态节点编译成常量 slot优化，采取槽编译成懒人功能，拿槽渲染的决定留给子组件 在模板中提取和重用内联事件（最初，每次渲染时都会重新生成内联函数） 代码结构调整，更方便树摇动，使其更小 使用打字脚本替换流 2、Vue3带来了什么改变？ 性能的提升 打包大小减少41% 初次渲染快55%, 更新渲染快133% 内存减少54% 源码的升级 使用Proxy代替defineProperty实现响应式 重写虚拟DOM的实现和Tree-Shaking 拥抱TypeScript Vue3可以更好的支持TypeScript","link":"/2022/12/01/vue2-vue3/"}],"tags":[{"name":"Nuxt3","slug":"Nuxt3","link":"/tags/Nuxt3/"},{"name":"Vue","slug":"Vue","link":"/tags/Vue/"},{"name":"Vue3","slug":"Vue3","link":"/tags/Vue3/"},{"name":"Jenkins","slug":"Jenkins","link":"/tags/Jenkins/"},{"name":"npm","slug":"npm","link":"/tags/npm/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"}],"categories":[]}